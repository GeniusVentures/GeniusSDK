name: GeniusSDK Tag Build

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to create releases for'
        required: true
        type: string

jobs:
  build:
    env:
      GRPC_BUILD_ENABLE_CCACHE: "ON"
      GH_TOKEN: ${{ secrets.GNUS_TOKEN_1 }}
    runs-on: ${{matrix.host}}
    strategy:
      fail-fast: false
      matrix:
        target: [Android, iOS, OSX, Linux, Windows]
        build-type: [Debug,Release]
        abi: [""]
        include:
          - target: Linux
            host: ubuntu-latest
            abi: x86_64
            build-type: Release
          - target: Linux
            host: ubuntu-latest
            abi: x86_64
            build-type: Debug
          - target: Linux
            host: ubuntu-24.04-arm
            abi: aarch64
            build-type: Release
          - target: Linux
            host: ubuntu-24.04-arm
            abi: aarch64
            build-type: Debug
          - target: Windows
            host: windows-latest
          - target: OSX
            host: macos-latest
          - target: Android
            host: ubuntu-latest
            abi: arm64-v8a
            build-type: Release
          - target: Android
            host: ubuntu-latest
            abi: arm64-v8a
            build-type: Debug
          - target: Android
            host: ubuntu-latest
            abi: armeabi-v7a
            build-type: Release
          - target: Android
            host: ubuntu-latest
            abi: armeabi-v7a
            build-type: Debug
          - target: iOS
            host: macos-latest
        exclude:
          - target: Android
            abi: ""
          - target: Linux
            abi: ""
    steps:
      - name: Configure Linux host
        if: ${{ runner.os == 'Linux'}}
        run: |
          sudo update-alternatives --install /usr/bin/cc cc $(which clang) 100
          sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++) 100
          sudo update-alternatives --set cc $(which clang)
          sudo update-alternatives --set c++ $(which clang++)
           
          sudo apt install ccache ninja-build libvulkan-dev libzstd-dev -y
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Configure Windows host
        if: ${{ runner.os == 'Windows'}}
        run: |
          choco install ccache -A

      - name: Configure macOS host
        if: ${{ runner.os == 'macOS'}}
        run: |
          brew install ccache ninja bash gnu-tar
          PATH="$HOMEBREW_PREFIX/opt/gnu-tar/libexec/gnubin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Set build directory
        run: |
          if [ '${{matrix.abi}}' ]; then
            BUILD_DIRECTORY_RELEASE=build/${{matrix.target}}/Release/${{matrix.abi}}
            BUILD_DIRECTORY=build/${{matrix.target}}/${{matrix.build-type}}/${{matrix.abi}}
          else
            BUILD_DIRECTORY_RELEASE=build/${{matrix.target}}/Release
            BUILD_DIRECTORY=build/${{matrix.target}}/${{matrix.build-type}}
          fi
          echo "BUILD_DIRECTORY=$BUILD_DIRECTORY" >> $GITHUB_ENV
          echo "BUILD_DIRECTORY_RELEASE=$BUILD_DIRECTORY_RELEASE" >> $GITHUB_ENV
        shell: bash

      - name: Download thirdparty release
        working-directory: ${{github.workspace}}
        run: |
          TAG_NAME="${{ github.event.inputs.tag }}"
          echo "Building for tag: ${TAG_NAME}"

          if [ '${{matrix.abi}}' ]; then
            FILE_NAME=${{matrix.target}}-${{matrix.abi}}-${{matrix.build-type}}.tar.gz
          else
            FILE_NAME=${{matrix.target}}-${{matrix.build-type}}.tar.gz
          fi
          echo "FILE_NAME=${FILE_NAME}" >> $GITHUB_ENV

          mkdir thirdparty
          cd thirdparty

          # Download from the tag's release
          echo "Downloading thirdparty from tag: ${TAG_NAME}"

          gh release download ${TAG_NAME} --repo GeniusVentures/thirdparty -p "${FILE_NAME}"
          tar -zxf "${FILE_NAME}"
        shell: bash

      - name: Download zkLLVM release
        working-directory: ${{github.workspace}}
        run: |
          TAG_NAME="${{ github.event.inputs.tag }}"
          
          mkdir zkLLVM
          cd zkLLVM

          # Download from the tag's release
          echo "Downloading zkLLVM from tag: ${TAG_NAME}"
          
          if [ '${{matrix.abi}}' ]; then
              ZKLLVM_FILE_NAME=${{matrix.target}}-${{matrix.abi}}-Release.tar.gz
          else
              ZKLLVM_FILE_NAME=${{matrix.target}}-Release.tar.gz
          fi

          gh release download ${TAG_NAME} --repo GeniusVentures/zkLLVM -p "${ZKLLVM_FILE_NAME}"

          tar --exclude='*bin/assigner' --exclude='*bin/clang-zkllvm' --exclude='*bin/llvm-link-zkllvm' --exclude='*bin/transpiler' -xzf "${ZKLLVM_FILE_NAME}"
        shell: bash

      - name: Download SuperGenius
        run: |
          TAG_NAME="${{ github.event.inputs.tag }}"
          
          mkdir SuperGenius
          cd SuperGenius

          # Download from the tag's release
          echo "Downloading SuperGenius from tag: ${TAG_NAME}"

          gh release download ${TAG_NAME} --repo GeniusVentures/SuperGenius -p "${FILE_NAME}"

          tar -xzf "${FILE_NAME}"
        shell: bash

      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: "GeniusSDK"
          submodules: "recursive"
          ref: ${{ github.event.inputs.tag }}

      - name: Configure CMake for Android
        if: ${{ matrix.target == 'Android'}}
        working-directory: ${{github.workspace}}/GeniusSDK
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DANDROID_ABI=${{matrix.abi}} -DTHIRDPARTY_BUILD_DIR=${{github.workspace}}/thirdparty/${BUILD_DIRECTORY} -DZKLLVM_DIR=${{github.workspace}}/zkLLVM/${BUILD_DIRECTORY_RELEASE} -DSUPERGENIUS_SRC_DIR=${{github.workspace}}/SuperGenius

      - name: Configure CMake for Mac
        if: ${{ matrix.target == 'OSX'}}
        working-directory: ${{github.workspace}}/GeniusSDK
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DPLATFORM=MAC_UNIVERSAL -DTHIRDPARTY_BUILD_DIR=${{github.workspace}}/thirdparty/${BUILD_DIRECTORY} -DZKLLVM_DIR=${{github.workspace}}/zkLLVM/${BUILD_DIRECTORY_RELEASE} -DSUPERGENIUS_SRC_DIR=${{github.workspace}}/SuperGenius

      - name: Configure CMake for iOS
        if: ${{ matrix.target == 'iOS'}}
        working-directory: ${{github.workspace}}/GeniusSDK
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DPLATFORM=OS64 -DTHIRDPARTY_BUILD_DIR=${{github.workspace}}/thirdparty/${BUILD_DIRECTORY} -DZKLLVM_DIR=${{github.workspace}}/zkLLVM/${BUILD_DIRECTORY_RELEASE} -DSUPERGENIUS_SRC_DIR=${{github.workspace}}/SuperGenius

      - name: Configure CMake for Linux
        if: ${{matrix.target == 'Linux'}}
        working-directory: ${{github.workspace}}/GeniusSDK
        run: cmake -S build/${{matrix.target}} -B $BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DTHIRDPARTY_BUILD_DIR=${{github.workspace}}/thirdparty/${BUILD_DIRECTORY} -DZKLLVM_DIR=${{github.workspace}}/zkLLVM/${BUILD_DIRECTORY_RELEASE} -DSUPERGENIUS_SRC_DIR=${{github.workspace}}/SuperGenius -DABI_SUBFOLDER_NAME='/${{matrix.abi}}'

      - name: Configure CMake for Windows
        if: ${{matrix.target == 'Windows'}}
        working-directory: ${{github.workspace}}/GeniusSDK
        run: cmake -S build/${{matrix.target}} -B $env:BUILD_DIRECTORY -DCMAKE_BUILD_TYPE=${{matrix.build-type}} -DTHIRDPARTY_BUILD_DIR=${{github.workspace}}/thirdparty/$env:BUILD_DIRECTORY -DZKLLVM_DIR=${{github.workspace}}/zkLLVM/$env:BUILD_DIRECTORY_RELEASE -DSUPERGENIUS_SRC_DIR=${{github.workspace}}/SuperGenius

      - name: Build GeniusSDK
        working-directory: ${{github.workspace}}/GeniusSDK/${{env.BUILD_DIRECTORY}}
        run: cmake --build . --config ${{matrix.build-type}} -j
        shell: bash

      - name: Install GeniusSDK
        working-directory: ${{github.workspace}}/GeniusSDK/${{env.BUILD_DIRECTORY}}
        run: cmake --install .

      - name: Create or check release
        working-directory: ${{github.workspace}}/GeniusSDK
        shell: bash
        run: |
          TAG_NAME='${{ github.event.inputs.tag }}'
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

          echo "Checking if GitHub release exists for tag: $TAG_NAME"

          set +e
          gh release view $TAG_NAME
          releaseFound=$?
          set -e

          if [[ $releaseFound -ne 0 ]]; then
              echo "Release not found, creating for tag: $TAG_NAME"

              # Create a single release for the tag
              gh release create $TAG_NAME \
                  -n "Build artifacts for tag ${TAG_NAME}" \
                  -t "${TAG_NAME} build artifacts"
          else
              echo "Release already exists for tag: $TAG_NAME"
          fi

      - name: Compress build artifacts
        working-directory: ${{github.workspace}}/GeniusSDK/${{env.BUILD_DIRECTORY}}
        run: |
          tar --exclude=.git -czvf ${FILE_NAME} --transform 's|^|${{env.BUILD_DIRECTORY}}/|' GeniusSDK/
        shell: bash

      - name: Release SDK
        working-directory: ${{github.workspace}}/GeniusSDK
        shell: bash
        run: |
          echo -e "Uploading ${FILE_NAME} to release ${TAG_NAME}"
          gh release upload --clobber ${TAG_NAME} "${{env.BUILD_DIRECTORY}}/${FILE_NAME}"